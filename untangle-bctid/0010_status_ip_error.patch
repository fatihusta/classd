diff -ur bcti-sdk-linux-5.27.2.orig/src/Daemon/Daemon.cpp bcti-sdk-linux-5.27.2/src/Daemon/Daemon.cpp
--- bcti-sdk-linux-5.27.2.orig/src/Daemon/Daemon.cpp	2019-06-14 11:23:01.000000000 -0400
+++ bcti-sdk-linux-5.27.2/src/Daemon/Daemon.cpp	2019-06-17 10:18:27.000000000 -0400
@@ -221,6 +221,12 @@
 	Json::Number(jHits, "local_db", statsData.dbHits);
 	Json::Number(jHits, "cache", statsData.cacheHits);
 
+	cJSON* jErrors = Json::Object(jRoot, "errors");
+	Json::Number(jErrors, "ip", statsData.ipErrors);
+	Json::Number(jErrors, "network", statsData.netErrors);
+	Json::Number(jErrors, "http", statsData.httpErrors);
+	Json::Number(jErrors, "proto", statsData.protoErrors);
+
 	if (1 == mode)
 		Stats::Instance()->CheckForUpdate(true);
 
@@ -312,6 +318,8 @@
 
 	Json::Number(jRoot, "log_level", config->GetLogLevel());
 
+	Json::String(jRoot, "counters", Daemon::GetStatsCounters(jsonReq, client, tag));
+
 	return jRoot;
 }
 }
diff -ur bcti-sdk-linux-5.27.2.orig/src/IsisSdkCore/IpAddress.cpp bcti-sdk-linux-5.27.2/src/IsisSdkCore/IpAddress.cpp
--- bcti-sdk-linux-5.27.2.orig/src/IsisSdkCore/IpAddress.cpp	2019-06-13 15:55:43.000000000 -0400
+++ bcti-sdk-linux-5.27.2/src/IsisSdkCore/IpAddress.cpp	2019-06-17 10:17:27.000000000 -0400
@@ -67,6 +67,7 @@
 
 namespace Isis
 {
+AtomicInt IpAddress::s_errors;
 IpAddress::IpAddress()
 	: m_protocol(Protocol::Undefined)
 {
@@ -189,6 +190,14 @@
 	return m_str;
 }
 
+int IpAddress::GetErrorCount(bool reset)
+{
+	int v = s_errors.value();
+	if (reset)
+		s_errors.reset();
+	return v;
+}
+
 void IpAddress::SetString() const
 {
 	switch (m_protocol)
@@ -285,6 +294,7 @@
 			"IpAddress:Resolve: Cannot resolve host %s (%s)",
 			url,
 		   gai_strerror(errCode));
+		++s_errors;
 		return false;
 	}
 	if (!gaiRes)
@@ -292,6 +302,7 @@
 		Log(LOG_Error,
 			"IpAddress:Resolve: Cannot resolve host %s (no result)",
 			url);
+		++s_errors;
 		return false;
 	}
 
diff -ur bcti-sdk-linux-5.27.2.orig/src/IsisSdkCore/IpAddress.h bcti-sdk-linux-5.27.2/src/IsisSdkCore/IpAddress.h
--- bcti-sdk-linux-5.27.2.orig/src/IsisSdkCore/IpAddress.h	2019-04-18 17:05:34.000000000 -0400
+++ bcti-sdk-linux-5.27.2/src/IsisSdkCore/IpAddress.h	2019-06-17 10:14:14.000000000 -0400
@@ -17,6 +17,7 @@
 #ifndef IsisSdk_IpAddress_h
 #define IsisSdk_IpAddress_h
 
+#include "AtomicInt.h"
 #include "IsisSdk_Export.h"
 #ifdef _WIN32
 #include <WS2tcpip.h>
@@ -40,6 +41,7 @@
 
 class ISISAPI IpAddress
 {
+	static AtomicInt s_errors;
 public:
 	enum Protocol
 	{
@@ -83,6 +85,7 @@
 	void GetV6Hextets(uint16_t* outHextets, bool raw = false) const;
 	// Lazily retrieves the most efficient string representation of the IP address.
 	const char* GetString() const;
+	static int GetErrorCount(bool reset = true);
 
 	IpAddress& Set(const uint32_t v4Address);
 	// Eight 16-bit values.
diff -ur bcti-sdk-linux-5.27.2.orig/src/IsisSdkCore/Json.h bcti-sdk-linux-5.27.2/src/IsisSdkCore/Json.h
--- bcti-sdk-linux-5.27.2.orig/src/IsisSdkCore/Json.h	2019-04-18 17:05:36.000000000 -0400
+++ bcti-sdk-linux-5.27.2/src/IsisSdkCore/Json.h	2019-06-17 09:57:53.000000000 -0400
@@ -78,6 +78,12 @@
 	static cJSON* String(cJSON* parentArray, std::string str);
 	static cJSON* String(cJSON* parentObj, const char* key, std::string str);
 	static cJSON* String(cJSON* parentObj, std::string key, std::string str);
+	static cJSON* String(cJSON* parentObj, const char* key, cJSON* object)
+	{
+		if (cJSON_IsObject(object))
+			cJSON_AddItemToObject(parentObj, key, object);
+		return parentObj;
+	}
 	static cJSON* StringFormattedToArray(cJSON* parentArray, const char* fmt, ...);
 	static cJSON* StringFormattedToObject(cJSON* parentObj, const char* key, const char* fmt, ...);
 	static cJSON* StringFormattedToObject(cJSON* parentObj, std::string key, const char* fmt, ...);
diff -ur bcti-sdk-linux-5.27.2.orig/src/IsisSdkCore/Stats.cpp bcti-sdk-linux-5.27.2/src/IsisSdkCore/Stats.cpp
--- bcti-sdk-linux-5.27.2.orig/src/IsisSdkCore/Stats.cpp	2019-04-18 17:05:37.000000000 -0400
+++ bcti-sdk-linux-5.27.2/src/IsisSdkCore/Stats.cpp	2019-06-17 10:15:13.000000000 -0400
@@ -69,6 +69,7 @@
 		out.tiEvidenceLookups,
 		reset);
 	out.queueDepth = TaskManager::Instance()->GetMaxQueue(reset);
+	out.ipErrors = IpAddress::GetErrorCount(reset);
 	out.netErrors = TCPConnection::GetErrorCount(reset);
 	out.httpErrors = Http::GetErrorCount(reset);
 	out.protoErrors = Query::GetErrorCount(reset);
diff -ur bcti-sdk-linux-5.27.2.orig/src/IsisSdkCore/Stats.h bcti-sdk-linux-5.27.2/src/IsisSdkCore/Stats.h
--- bcti-sdk-linux-5.27.2.orig/src/IsisSdkCore/Stats.h	2019-04-18 17:05:37.000000000 -0400
+++ bcti-sdk-linux-5.27.2/src/IsisSdkCore/Stats.h	2019-06-17 10:14:52.000000000 -0400
@@ -38,6 +38,7 @@
 	int queueDepth;				//!< maximum queue depth reached
 	int trustScore;				//!< trusted user rep average
 	int guestScore;				//!< guest user rep average
+	int ipErrors;				//!< total number of IP errors
 	int netErrors;				//!< total number of lookup errors
 	int httpErrors;				//!< total number of lookup errors
 	int protoErrors;			//!< total number of lookup errors
