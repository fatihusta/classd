#!/bin/dash

UNTANGLE_PRIORITY_BASE="36"
UNTANGLE_PRIORITY_SPLITD="366"

UNTANGLE_SPLITD_SHIFT=8
UNTANGLE_SPLITD_MASK=0xE00

UNTANGLE_SPLITD_QUEUE_NUM=3004

IP_RT_TABLE_BASE=64

IPTABLES=${IPTABLES:-iptables}

debug()
{
    echo "[DEBUG:`date`] $*"
}

is_queue_open()
{
    local t_splitd_pid
    local t_queue_pid

    t_splitd_pid="invalid"
    
    if [ ! -f /proc/net/netfilter/nfnetlink_queue ] ; then return 1; fi

    t_queue_pid=`awk -v queue=${UNTANGLE_SPLITD_QUEUE_NUM} '{ if ( $1 == queue ) print $2 }' /proc/net/netfilter/nfnetlink_queue`
    if [ -z "${t_queue_pid}" ]; then return 1 ; fi
    
    t_splitd_pid=${t_queue_pid}
    
    grep -q splitd /proc/${t_splitd_pid}/cmdline 2>| /dev/null || return 1

    return 0
}

flush_splitd_ip_rules()
{
    local t_priority

    for t_priority in `ip rule show | awk "/^${UNTANGLE_PRIORITY_SPLITD}[0-9][0-9]:/ { sub( \":\", \"\", \\$1 ) ; print \\$1 }"`; do
        ip rule del priority ${t_priority}
    done
}

expected_splitd_ip_rules()
{
    local t_index
    for t_index in `seq 1 8` ; do
        printf "${UNTANGLE_PRIORITY_SPLITD}%02d:\tfrom all fwmark %#x/%#x lookup uplink.%d \n" ${t_index} \
            $(( ${t_index} << ${UNTANGLE_SPLITD_SHIFT} )) ${UNTANGLE_SPLITD_MASK} \
            ${t_index}
    done
}

current_splitd_ip_rules()
{
    ip rule show | awk "/^${UNTANGLE_PRIORITY_SPLITD}[0-9][0-9]:/ { print }" 
}

## This script updates the state of the system so that SplitD can
## route traffic through the different interfaces.
insert_splitd_ip_rules()
{
    local t_index
    local t_priority
    for t_index in `seq 1 8` ; do
        t_priority=`printf "${UNTANGLE_PRIORITY_SPLITD}%02d" ${t_index}`
        ip rule add priority  ${t_priority} \
            fwmark $(( ${t_index} << ${UNTANGLE_SPLITD_SHIFT} ))/${UNTANGLE_SPLITD_MASK} \
            lookup uplink.${t_index} 
    done
}

insert_splitd_iptables_rules()
{
    ## Using alpaca-redirect because this guarantees this occurs
    ## before a redirect which is a terminating target.  Has to occur in NAT Prerouting
    ## because the decision must be made before routing.
    ${IPTABLES} -t nat -I alpaca-redirect 1 -m addrtype --dst-type unicast -j NFQUEUE --queue-num ${UNTANGLE_SPLITD_QUEUE_NUM}
}

## Start of script
if [ -f /etc/default/untangle-shield ]; then 
    . /etc/default/untangle-shield
fi


## If the queue is not open, flush the rules and exit
is_queue_open || {
    flush_splitd_ip_rules
    exit 0
}

if [ "`expected_splitd_ip_rules | md5sum`" = "`current_splitd_ip_rules  | md5sum`" ]; then
    debug "ip rules are up to date."
else
    flush_splitd_ip_rules
    insert_splitd_ip_rules
fi

insert_splitd_iptables_rules
