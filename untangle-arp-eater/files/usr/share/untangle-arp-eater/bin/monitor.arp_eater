#!/bin/dash

mkdir -p /var/log/arp-eater

exec >> /var/log/arp-eater/debug.log 2>&1

NAME="arp_eater"
ARP_EATER_PID_FILE="/var/run/${NAME}.pid"

ARP_EATER_MONITOR_DELAY="10"

load_defaults()
{
    ARP_EATER_BIND_PORT="3002"
    ARP_EATER_CONF_FILE="/etc/arp-eater.conf"
    ARP_EATER_MONITOR_DELAY="10"

    ARP_EATER_LOG_OUT="/var/log/arp-eater/debug.log"
    ARP_EATER_LOG_ERR="/var/log/arp-eater/error.log"
    
    if [ -f /etc/default/untangle-arp_eater ] ; then
        . /etc/default/untangle-arp-eater
    fi
}

reap_child_hardest()
{
  reap_child 6
}

reap_child_harder()
{
  reap_child 15
}

reap_child_easy()
{
  reap_child 2
}

reap_child()
{
    echo "[`date`] Retrieved signal to stop daemon."

    killall -2 ${NAME}

    exit 0
}

start_arp_eater()
{
    killall ${NAME} > /dev/null 2>&1

    load_defaults
    
    local t_args="${ARP_EATER_ARGS} -d "
    local t
    
    test -n "${ARP_EATER_BIND_PORT}" && t_args="${t_args} -p ${ARP_EATER_BIND_PORT}"
    test -n "${ARP_EATER_CONF_FILE}" && t_args="${t_args} -c ${ARP_EATER_CONF_FILE}"
    test -n "${ARP_EATER_LOG_OUT}" && t_args="${t_args} -o ${ARP_EATER_LOG_OUT}"
    test -n "${ARP_EATER_LOG_ERR}" && t_args="${t_args} -e ${ARP_EATER_LOG_ERR}"
    
    /usr/bin/${NAME} ${t_args}
}

is_still_running()
{
    local t_pid="invalid"
    
    ## Perform a simple curl call to make sure the server is still running.
    curl -sf -F 'json_request=@-' -m 10 "http://localhost:${ARP_EATER_BIND_PORT}"  > /dev/null 2>&1 <<EOF
{ "function" : "hello_world" }
EOF
}

trap reap_child_hardest 6
trap reap_child_harder 15
trap reap_child_easy 2

while ( true ) ;  do
    is_still_running || {
        echo "[`date`] ArpEater stopped, restarting daemon"
        start_arp_eater
    }

    sleep ${ARP_EATER_MONITOR_DELAY}
done
