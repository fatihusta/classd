diff -ur bcti-sdk-linux-5.27.1.orig/src/Daemon/Daemon.cpp bcti-sdk-linux-5.27.1/src/Daemon/Daemon.cpp
--- bcti-sdk-linux-5.27.1.orig/src/Daemon/Daemon.cpp	2019-04-23 07:29:47.000000000 -0700
+++ bcti-sdk-linux-5.27.1/src/Daemon/Daemon.cpp	2019-05-23 16:34:46.000000000 -0700
@@ -88,6 +88,7 @@
 		r.StartObject("hits");
 		{
 			r.Number("network", statsData.cloudHits);
+			r.Number("ip", statsData.ipErrors);
 //			r.Number("cloud", statsData.cloudLookups);
 			r.Number("local_db", statsData.dbHits);
 			r.Number("cache", statsData.cacheHits);
@@ -196,6 +197,46 @@
 		}
 		r.EndScope();
 
+		r.StartObject("stats");
+		{
+			StatsData statsData;
+			Stats::Instance()->GetValues(statsData, 0);
+
+			r.StartObject();
+			{
+				r.Number("cdb_app", statsData.cdbAppLookups);
+				r.Number("cdb_conn", statsData.cdbConnectionLookups);
+				r.Number("cdb_file", statsData.cdbFileLookups);
+				r.Number("cdb_ip", statsData.cdbIpLookups);
+				r.Number("cdb_url", statsData.cdbUrlLookups);
+				r.Number("ip_geo", statsData.ipGeoLookups);
+				r.Number("ip_rep", statsData.ipRepLookups);
+				r.Number("ip_threat", statsData.ipThreatLookups);
+				r.Number("md5", statsData.fileMd5Lookups);
+				r.Number("mobile", statsData.mobileAppLookups);
+				r.Number("phish", statsData.phishingScoreLookups);
+				r.Number("uncat", statsData.uncatResponses);
+				r.StartObject("hits");
+				{
+					r.Number("network", statsData.cloudHits);
+					r.Number("local_db", statsData.dbHits);
+					r.Number("cache", statsData.cacheHits);
+				}
+				r.EndScope();
+				r.StartObject("errors");
+				{
+					r.Number("network", statsData.netErrors);
+					r.Number("ip", statsData.ipErrors);
+					r.Number("http", statsData.httpErrors);
+					r.Number("proto", statsData.protoErrors);
+				}
+				r.EndScope();
+			}
+			r.EndScope(true);
+
+		}
+		r.EndScope();
+
 		r.Number("log_level", config->GetLogLevel());
 	}
 	r.EndScope(true);
diff -ur bcti-sdk-linux-5.27.1.orig/src/IsisSdkCore/IpAddress.cpp bcti-sdk-linux-5.27.1/src/IsisSdkCore/IpAddress.cpp
--- bcti-sdk-linux-5.27.1.orig/src/IsisSdkCore/IpAddress.cpp	2019-04-03 14:00:29.000000000 -0700
+++ bcti-sdk-linux-5.27.1/src/IsisSdkCore/IpAddress.cpp	2019-05-23 16:31:24.000000000 -0700
@@ -67,6 +67,8 @@
 
 namespace Isis
 {
+AtomicInt IpAddress::s_errors;
+
 IpAddress::IpAddress()
 	: m_protocol(Protocol::Undefined)
 {
@@ -149,6 +151,14 @@
 		|| ((thisVals[0] == rhsVals[0]) && (thisVals[1] < rhsVals[1]));
 }
 
+int IpAddress::GetErrorCount(bool reset)
+{
+	int v = s_errors.value();
+	if (reset)
+		s_errors.reset();
+	return v;
+}
+
 uint32_t IpAddress::GetV4Int(bool raw) const
 {
 	return
@@ -285,6 +295,7 @@
 			"IpAddress:Resolve: Cannot resolve host %s (%s)",
 			url,
 		   gai_strerror(errCode));
+		++s_errors;
 		return false;
 	}
 	if (!gaiRes)
@@ -292,6 +303,7 @@
 		Log(LOG_Error,
 			"IpAddress:Resolve: Cannot resolve host %s (no result)",
 			url);
+		++s_errors;
 		return false;
 	}
 
diff -ur bcti-sdk-linux-5.27.1.orig/src/IsisSdkCore/IpAddress.h bcti-sdk-linux-5.27.1/src/IsisSdkCore/IpAddress.h
--- bcti-sdk-linux-5.27.1.orig/src/IsisSdkCore/IpAddress.h	2019-04-03 14:00:29.000000000 -0700
+++ bcti-sdk-linux-5.27.1/src/IsisSdkCore/IpAddress.h	2019-05-23 16:33:10.000000000 -0700
@@ -18,6 +18,7 @@
 #define IsisSdk_IpAddress_h
 
 #include "IsisSdk_Export.h"
+#include "AtomicInt.h"
 #ifdef _WIN32
 #include <WS2tcpip.h>
 #else
@@ -40,6 +41,7 @@
 
 class ISISAPI IpAddress
 {
+	static AtomicInt s_errors;
 public:
 	enum Protocol
 	{
@@ -76,6 +78,7 @@
 
 	void Clear() { *this = Empty; }
 
+	static int GetErrorCount(bool reset = true);
 	Protocol GetProtocol() const { return m_protocol; }
 	uint32_t GetV4Int(bool raw = false) const;
 	void GetV4Int(uint32_t& outInt, bool raw = false) const;
diff -ur bcti-sdk-linux-5.27.1.orig/src/IsisSdkCore/Stats.cpp bcti-sdk-linux-5.27.1/src/IsisSdkCore/Stats.cpp
--- bcti-sdk-linux-5.27.1.orig/src/IsisSdkCore/Stats.cpp	2019-04-03 14:00:29.000000000 -0700
+++ bcti-sdk-linux-5.27.1/src/IsisSdkCore/Stats.cpp	2019-05-23 16:33:38.000000000 -0700
@@ -70,6 +70,7 @@
 		reset);
 	out.queueDepth = TaskManager::Instance()->GetMaxQueue(reset);
 	out.netErrors = TCPConnection::GetErrorCount(reset);
+	out.ipErrors = IpAddress::GetErrorCount(reset);
 	out.httpErrors = Http::GetErrorCount(reset);
 	out.protoErrors = Query::GetErrorCount(reset);
 
diff -ur bcti-sdk-linux-5.27.1.orig/src/IsisSdkCore/Stats.h bcti-sdk-linux-5.27.1/src/IsisSdkCore/Stats.h
--- bcti-sdk-linux-5.27.1.orig/src/IsisSdkCore/Stats.h	2019-04-03 14:00:29.000000000 -0700
+++ bcti-sdk-linux-5.27.1/src/IsisSdkCore/Stats.h	2019-05-23 16:34:15.000000000 -0700
@@ -38,7 +38,8 @@
 	int queueDepth;				//!< maximum queue depth reached
 	int trustScore;				//!< trusted user rep average
 	int guestScore;				//!< guest user rep average
-	int netErrors;				//!< total number of lookup errors
+	int netErrors;				//!< total number of network errors
+	int ipErrors;				//!< total number of lookup errors
 	int httpErrors;				//!< total number of lookup errors
 	int protoErrors;			//!< total number of lookup errors
 	int majorVer;				//!< current major version
