#!/usr/bin/env ruby
## Copyright (c) 2003-2008 Untangle, Inc.
##  All rights reserved.
## 
##  This software is the confidential and proprietary information of
##  Untangle, Inc. ("Confidential Information"). You shall
##  not disclose such Confidential Information.
## 
##  $Id: ADConnectorImpl.java 15443 2008-03-24 22:53:16Z amread $
## 

require "ftools"
require "logger"
require "fileutils"
require "tempfile"

## tmp_path is the path to where the command should be copied to before running it.
## The command has to be copied over in order to deal with certains OSs lack of permissions.
def handle_actions( tmp_path )
  Dir.open( CommandDirectory ) do |command_dir|
    ## No new commands
    if ( command_dir.count == 2 )
      return
    end
    
    command_dir.each do |file_name|
      next if file_name == "."
      next if file_name == ".."

      file_path = "#{CommandDirectory}/#{file_name}"

      $logger.debug( "testing the file #{file_path}" ) if ( $logger.debug? )
           
      next unless File.file?( file_path )
      next unless file_name.index( "command_" ) == 0

      ## This key is used as indication that the command is complete
      next unless Kernel.system( "grep -q 5640143ac40885c251e34e9a41de092c #{file_path} > /dev/null 2>/dev/null" )

      $logger.debug( "Found the command '#{file_name}'" ) if ( $logger.debug? )

      output_prefix = "#{OutputDirectory}/#{file_name}"

      FileUtils.mv( file_path, tmp_path )
      File.chmod( 0755, tmp_path )
      $logger.debug( "Converting #{tmp_path} to unix newlines." )
      Kernel.system( "dos2unix #{tmp_path}" )
      $logger.debug( "Running the command #{tmp_path} > #{output_prefix}.out 2>#{output_prefix}.err" )
      Kernel.system( "#{tmp_path} > #{output_prefix}.out 2>#{output_prefix}.err" )
      file_path = "#{OutputDirectory}/#{file_name}.ret"

      ## In order to avoid dos newline issues ... don't print a newline
      File.open( file_path, "w" ) do |f|
        f.print( $?.exitstatus.to_s )
      end
    end
  end
end

shared_directory = ENV["SHARED_DIRECTORY"]
SharedDirectory = shared_directory.nil? ? "/mnt/hgfs/untangle" : shared_directory
poll_timeout = ENV["POLL_TIMEOUT"]
PollTimeout = poll_timeout.nil? ? 1.0 : poll_timeout

CommandDirectory = "#{SharedDirectory}/commands/"
OutputDirectory = "#{SharedDirectory}/logs/"

$is_running = true
$logger = Logger.new(STDERR)
$logger.level = Logger::DEBUG

Kernel.system( "mkdir", "-p", OutputDirectory )
Kernel.system( "mkdir", "-p", CommandDirectory )

## Create this file once and reuse it.
$command_file = Tempfile.new( "wintangle-command" )

while $is_running
  begin
    sleep PollTimeout
    handle_actions( $command_file.path )
  rescue
    $logger.debug "fail #{$!}" if $logger.debug?
    sleep( PollTimeout * 2 )
  end
end

FileUtils.rm( $command_file, :force => true )

