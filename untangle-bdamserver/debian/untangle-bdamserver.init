#!/bin/sh

### BEGIN INIT INFO
# Provides:          untangle-bdamserver
# Required-Start:    $network $syslog $remote_fs
# Required-Stop:     $network $syslog $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Bitdefender anti-malware server daemon
# Description:       Used by untangle-virusblocker and untangle-spamblocker
### END INIT INFO

. /lib/lsb/init-functions

NAME=bdamserver
DESC=untangle-bdamserver
CONFDIR=/etc/$NAME
BINDIR=/usr/lib/$NAME
RUNDIR=/usr/lib/$NAME
PIDDIR=/var/run

DAEMON=$BINDIR/$NAME
DAEMON_CONFFILE=$CONFDIR/$NAME.conf
DAEMON_PIDFILE=$PIDDIR/$NAME.pid
DAEMON_STOP_TIMEOUT=5
DAEMON_OPTS=

# Reads config file (will override defaults above)
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

start()
{
    log_daemon_msg "Starting $DESC"

    log_progress_msg "$DESC"
    do_start

    log_end_msg 0	
}

stop()
{
    log_daemon_msg "Stopping $DESC"

    log_progress_msg "$DESC"
    if ! ensure_stop; then
        log_progress_msg "$NAME is not running"
    fi

    log_end_msg 0	
}

restart()
{
    stop
    sleep 5
    start
}

reload()
{
    echo "Not implemented"
}

do_start()
{
    # touch the cache.000 file to tell it to run in low memory mode
    # do this every start just in case
    if [ -d /var/cache/untangle-bdamserver/virus/2/Plugins ] ; then
        touch /var/cache/untangle-bdamserver/virus/2/Plugins/cache.000
    fi
    if [ -d /var/cache/untangle-bdamserver/virus/1/Plugins ] ; then
        touch /var/cache/untangle-bdamserver/virus/1/Plugins/cache.000
    fi

    # the bdamserver daemon truncates the log file every time it starts
    # so we append the existing contents to a file in a different directory
    # and logrotate will make sure neither one of them get too big.
    if [ -f /var/log/bdamserver.log ]
    then
        cat /var/log/bdamserver.log >> /var/log/untangle-bdamserver/bdamserver.log
    fi

    # make sure the log file exists and has the correct user and group
    truncate -s 0 /var/log/bdamserver.log
    chown daemon:daemon /var/log/bdamserver.log

    # make sure the database directory has the correct user and group
    chown -R daemon:daemon /var/cache/untangle-bdamserver

    # since we run as daemon:daemon we need to pre-create the pid file
    truncate -s 0 $DAEMON_PIDFILE
    chown daemon:daemon $DAEMON_PIDFILE
    start-stop-daemon --chuid daemon:daemon --chdir ${RUNDIR} --pidfile ${DAEMON_PIDFILE} --start --background --exec $DAEMON -- -c $DAEMON_CONFFILE $DAEMON_OPTS
}

do_stop()
{
    stop_process $NAME $DAEMON_PIDFILE $DAEMON_STOP_TIMEOUT
}

ensure_stop()
{
    local rc=1
    if is_process_running $DAEMON_PIDFILE || pgrep $NAME > /dev/null ; then
        do_stop
        pkill -9 $NAME
        rc=0
    fi
    return $rc
}

is_process_running()
{
    local PIDFILE=$1
    if [ -f $PIDFILE ]; then
        local PID=`cat $PIDFILE`
        if [ -z "$PID" ] ; then
            return 1
        fi 
        if [ `ps --pid $PID --no-headers | wc -l` != 0 ]; then
            return 0
        fi
    fi
    return 1
}

wait_process()
{
    local PIDFILE=$1
    local TIMEOUT=$2
    while [ $TIMEOUT -gt 0 ]; do
        if ! is_process_running $PIDFILE; then
            return 0
        fi
        sleep 1s
        TIMEOUT=$(($TIMEOUT-1))
    done

    if is_process_running $PIDFILE; then
        return 1
    fi
    return 0
}

stop_process()
{
    local TYPE=$1
    local PIDFILE=$2
    local TIMEOUT=$3

    if is_process_running $PIDFILE; then
        local PID=`cat $PIDFILE`
        kill $PID

        if ! wait_process $PIDFILE $TIMEOUT; then
            echo "terminating $TYPE..."
            kill -s 9 $PID
        fi
        rm -f $PIDFILE
    fi
}

case "$1" in
    start)
        start
        ;;

    stop)
        stop
        ;;

    restart)
        restart
        ;;

    reload)
        reload
        ;;

    *)
        echo "Usage : $0 (start|stop|restart|reload)"
        ;;

esac

exit 0
